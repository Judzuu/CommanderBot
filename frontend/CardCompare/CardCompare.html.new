<!DOCTYPE html>
<html lang="en">
<head>
  <!-- Metadata -->
  <meta charset="UTF-8">
  <title>MTG Trade Balance</title>

  <!-- Favicon -->
  <link rel="icon" type="image/x-icon" href="commanderbotlogo.png">

  <!-- Styles -->
  <style>
    /* Page layout */
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
      max-width: 1000px;
      margin: auto;
    }
    h1, h2 { text-align: center; }

    /* Back‑to‑home */
    #backHome {
      margin-bottom: 15px;
      padding: 6px 12px;
      font-size: 14px;
      cursor: pointer;
    }

    /* Trade panels */
    .trade-sides {
      display: flex;
      justify-content: space-between;
      gap: 40px;
      flex-wrap: wrap;
    }
    .side {
      flex: 1;
      min-width: 300px;
      border: 1px solid #ccc;
      padding: 15px;
      border-radius: 10px;
      box-shadow: 2px 2px 10px #ddd;
    }

    /* Inputs */
    .input-group { display: flex; flex-direction: column; gap: 8px; margin-bottom: 10px; }
    input[type="text"], select, button { width: 100%; padding: 6px; font-size: 14px; }
    .switch-group { display: flex; align-items: center; gap: 6px; }

    /* Card list */
    ul { list-style: none; padding: 0; }
    li {
      background: #f7f7f7;
      margin-bottom: 10px;
      padding: 8px;
      border-radius: 6px;
      display: flex;
      gap: 10px;
      align-items: flex-start;
    }
    .card-img {
      width: 100px;
      height: auto;
      border-radius: 6px;
      box-shadow: 0 0 4px rgba(0,0,0,0.2);
    }
    .card-info { flex: 1; }
    .card-info span { display: block; font-size: 14px; }
    .card-info small { color: gray; }

    /* details / summary */
    details { margin-top: 6px; font-size: 13px; }
    details summary { cursor: pointer; font-weight: 600; }
    .card-oracle { white-space: pre-line; margin-top: 4px; }

    /* Totals / errors */
    .total { margin-top: 15px; font-weight: bold; }
    .error { color: red; text-align: center; }
    .unbalanced { color: red; }

    /* Autocomplete */
    .autocomplete-results { position: relative; }
    .autocomplete-list {
      position: absolute; top: 100%; left: 0; right: 0; z-index: 10;
      background: white; border: 1px solid #ccc; max-height: 150px;
      overflow-y: auto; box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    .autocomplete-list div { padding: 6px 10px; cursor: pointer; }
    .autocomplete-list div:hover { background: #f0f0f0; }
  </style>

  <!-- Google AdSense (optional) -->
  <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3031340425628894" crossorigin="anonymous"></script>
</head>

<body>
  <!-- Back to home -->
  <button id="backHome" onclick="window.location.href='index.html'">⬅ Back to Home</button>

  <!-- Title -->
  <h1>MTG Trade Balance Powered by Scryfall</h1>

  <!-- Trade panels -->
  <div class="trade-sides">
    <!-- Trader A -->
    <div class="side">
      <h2>Trader A</h2>
      <div class="input-group">
        <div class="autocomplete-results">
          <input type="text" id="cardA-name" placeholder="Search card name" autocomplete="off">
          <div id="autocompleteA" class="autocomplete-list"></div>
        </div>
        <select id="cardA-version"><option value="">Select version...</option></select>
        <div class="switch-group">
          <input type="checkbox" id="foilA"><label for="foilA">Foil</label>
        </div>
        <button onclick="addCardToTrade('A')">Add to Trade</button>
      </div>
      <ul id="listA"></ul>
      <div class="total">Total: $<span id="totalA">0.00</span></div>
    </div>

    <!-- Trader B -->
    <div class="side">
      <h2>Trader B</h2>
      <div class="input-group">
        <div class="autocomplete-results">
          <input type="text" id="cardB-name" placeholder="Search card name" autocomplete="off">
          <div id="autocompleteB" class="autocomplete-list"></div>
        </div>
        <select id="cardB-version"><option value="">Select version...</option></select>
        <div class="switch-group">
          <input type="checkbox" id="foilB"><label for="foilB">Foil</label>
        </div>
        <button onclick="addCardToTrade('B')">Add to Trade</button>
      </div>
      <ul id="listB"></ul>
      <div class="total">Total: $<span id="totalB">0.00</span></div>
    </div>
  </div>

  <!-- Error line -->
  <div class="error" id="error-message"></div>

  <!-- Core logic -->
  <script>
    /* ---------- state ---------- */
    const trade = { A: [], B: [] };

    /* ---------- fetch helpers ---------- */
    async function fetchVersions(cardName, dropdownId) {
      const dropdown = document.getElementById(dropdownId);
      dropdown.innerHTML = '<option>Loading...</option>';
      try {
        const search = await fetch(`https://api.scryfall.com/cards/named?fuzzy=${encodeURIComponent(cardName)}`);
        if (!search.ok) throw new Error('Card not found');
        const card = await search.json();

        /* fallback: single printing */
        if (!card.prints_search_uri) {
          dropdown.innerHTML = '<option value="">Only one version available</option>';
          const opt = document.createElement('option');
          opt.value = card.id;
          opt.textContent = `${card.set_name} (#${card.collector_number})`;
          dropdown.appendChild(opt);
          return;
        }

        const res = await fetch(card.prints_search_uri);
        if (!res.ok) throw new Error('Failed to fetch print versions');
        const data = await res.json();

        dropdown.innerHTML = '<option value="">Select version...</option>';
        data.data.forEach(p => {
          const opt = document.createElement('option');
          opt.value = p.id;
          opt.textContent = `${p.set_name} (#${p.collector_number})`;
          dropdown.appendChild(opt);
        });
        if (!data.data.length) dropdown.innerHTML = '<option value="">No versions found</option>';
      } catch (err) {
        console.error(err);
        dropdown.innerHTML = '<option value="">Error loading versions</option>';
      }
    }

    async function fetchCardById(id) {
      const r = await fetch(`https://api.scryfall.com/cards/${id}`);
      if (!r.ok) throw new Error('Card fetch failed');
      return r.json();
    }

    /* ---------- rendering ---------- */
    function renderList(side) {
      const list = document.getElementById(`list${side}`);
      const totalEl = document.getElementById(`total${side}`);
      list.innerHTML = '';
      let total = 0;

      trade[side].forEach(({ card, foil }, idx) => {
        const price = foil ? card.prices.usd_foil : card.prices.usd;
        const showPrice = price || '0.00';
        total += parseFloat(showPrice) || 0;

        const li = document.createElement('li');
        li.innerHTML = `
          <img class="card-img" src="${card.image_uris?.small || ''}" alt="${card.name}">
          <div class="card-info">
            <span>${card.name} ${foil ? '[Foil]' : ''}</span>
            <small>${card.set_name} (#${card.collector_number})</small>
            <span>$${showPrice}</span>

            <details>
              <summary>More info</summary>
              <div><strong>Mana Cost:</strong> ${card.mana_cost || '—'}</div>
              <div><strong>Type Line:</strong> ${card.type_line}</div>
              <div><strong>Rarity:</strong> ${card.rarity}</div>
              <div class="card-oracle">${card.oracle_text || ''}</div>
            </details>
          </div>
          <button onclick="removeCard('${side}', ${idx})">Remove</button>
        `;
        list.appendChild(li);
      });

      totalEl.textContent = total.toFixed(2);
      trade[`total${side}`] = total;

      /* balance indicator (unchanged from your original) */
      document.getElementById('totalA').classList.remove('unbalanced');
      document.getElementById('totalB').classList.remove('unbalanced');
      if (trade.A.length > 0 && trade.B.length > 0) {
        const diff = Math.abs((trade.totalA || 0) - (trade.totalB || 0));
        if (diff > 5) {
          if (trade.totalA > trade.totalB) {
            document.getElementById('totalB').classList.add('unbalanced');
          } else {
            document.getElementById('totalA').classList.add('unbalanced');
          }
        }
      }
    }

    /* ---------- actions ---------- */
    function removeCard(side, idx) {
      trade[side].splice(idx, 1);
      renderList(side);
    }

    async function addCardToTrade(side) {
      const id = document.getElementById(`card${side}-version`).value;
      const foil = document.getElementById(`foil${side}`).checked;
      const err = document.getElementById('error-message');
      err.textContent = '';
      if (!id) { err.textContent = 'Please select a version.'; return; }

      try {
        const card = await fetchCardById(id);
        trade[side].push({ card, foil });
        renderList(side);
      } catch (e) {
        console.error(e);
        err.textContent = 'Failed to add card.';
      }
    }

    /* ---------- autocomplete ---------- */
    function setupAutocomplete(inputId, listId, dropdownId) {
      const input = document.getElementById(inputId);
      const list  = document.getElementById(listId);

      input.addEventListener('input', async () => {
        const q = input.value.trim();
        if (!q) { list.innerHTML = ''; return; }

        const res = await fetch(`https://api.scryfall.com/cards/autocomplete?q=${encodeURIComponent(q)}`);
        if (!res.ok) return console.error('Autocomplete fetch error');
        const data = await res.json();
        list.innerHTML = '';

        data.data.slice(0, 10).forEach(name => {
          const div = document.createElement('div');
          div.textContent = name;
          div.onclick = () => { input.value = name; list.innerHTML = ''; fetchVersions(name, dropdownId); };
          list.appendChild(div);
        });
      });
      input.addEventListener('blur', () => setTimeout(() => list.innerHTML = '', 200));
    }

    setupAutocomplete('cardA-name', 'autocompleteA', 'cardA-version');
    setupAutocomplete('cardB-name', 'autocompleteB', 'cardB-version');

    /* ---------- on-change with retry (kept from your original) ---------- */
    document.getElementById('cardA-name').addEventListener('change', async () => {
      const name = document.getElementById('cardA-name').value.trim();
      if (name.length < 2 || name.length > 50) {
        document.getElementById('error-message').textContent = 'Card name must be between 2 and 50 characters.';
        return;
      }
      await fetchVersions(name, 'cardA-version');
      if (document.getElementById('cardA-version').options.length <= 1) {
        await fetchVersions(name, 'cardA-version');
      }
    });
    document.getElementById('cardB-name').addEventListener('change', async () => {
      const name = document.getElementById('cardB-name').value.trim();
      if (name.length < 2 || name.length > 50) {
        document.getElementById('error-message').textContent = 'Card name must be between 2 and 50 characters.';
        return;
      }
      await fetchVersions(name, 'cardB-version');
    });
  </script>

</body>
</html>
